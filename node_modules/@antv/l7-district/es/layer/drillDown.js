function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// tslint:disable-next-line: no-submodule-imports
import mergeWith from 'lodash/mergeWith';
import CityLayer from './city';
import CountryLayer from './country';
import ProvinceLayer from './province';

function mergeCustomizer(objValue, srcValue) {
  if (Array.isArray(srcValue)) {
    return srcValue;
  }
}

var DrillDownLayer = /*#__PURE__*/function () {
  function DrillDownLayer(scene, option) {
    var _this = this;

    _classCallCheck(this, DrillDownLayer);

    this.drillState = 0;
    this.layers = [];
    this.options = mergeWith(this.getDefaultOption(), option, mergeCustomizer);
    this.scene = scene;
    this.provinceLayer = new CountryLayer(scene, this.getLayerOption('province'));
    this.cityLayer = new ProvinceLayer(scene, this.getLayerOption('city'));
    this.countyLayer = new CityLayer(scene, this.getLayerOption('county'));
    this.scene.setMapStatus({
      doubleClickZoom: false
    });

    if (!this.options.customTrigger) {
      this.provinceLayer.on('loaded', function () {
        _this.addCountryEvent();

        _this.layers.push(_this.provinceLayer);
      });
      this.cityLayer.on('loaded', function () {
        _this.addProvinceEvent();

        _this.layers.push(_this.cityLayer);
      });
      this.countyLayer.on('loaded', function () {
        _this.addCityEvent();

        _this.layers.push(_this.cityLayer);
      });
    }
  }

  _createClass(DrillDownLayer, [{
    key: "getDefaultOption",
    value: function getDefaultOption() {
      return {
        drillDepth: 2,
        customTrigger: false,
        drillDownTriggerEvent: 'click',
        drillUpTriggerEvent: 'undblclick',
        provinceData: [],
        cityData: [],
        countyData: [],
        city: {
          adcode: []
        },
        county: {
          adcode: []
        }
      };
    }
  }, {
    key: "addCountryEvent",
    value: function addCountryEvent() {
      var _this2 = this;

      var _this$options = this.options,
          drillDownTriggerEvent = _this$options.drillDownTriggerEvent,
          drillDownEvent = _this$options.drillDownEvent; // 省级下钻到市

      this.provinceLayer.fillLayer.on(drillDownTriggerEvent, function (e) {
        _this2.provinceLayer.hide();

        _this2.drillDown(e.feature.properties.adcode);

        drillDownEvent && drillDownEvent(e.feature.properties);
      });
    }
  }, {
    key: "addProvinceEvent",
    value: function addProvinceEvent() {
      var _this3 = this;

      var _this$options2 = this.options,
          drillDownTriggerEvent = _this$options2.drillDownTriggerEvent,
          drillUpTriggerEvent = _this$options2.drillUpTriggerEvent,
          drillUpEvent = _this$options2.drillUpEvent,
          drillDownEvent = _this$options2.drillDownEvent;
      this.cityLayer.fillLayer.on(drillUpTriggerEvent, function () {
        var properties = _this3.getProperties(_this3.provinceLayer.getFillData(), _this3.cityLayer.getOptions().adcode);

        _this3.drillUp();

        drillUpEvent && drillUpEvent(properties);
      });
      this.cityLayer.fillLayer.on(drillDownTriggerEvent, function (e) {
        _this3.drillDown(e.feature.properties.adcode);

        drillDownEvent && drillDownEvent(e.feature.properties);
      });
    }
  }, {
    key: "addCityEvent",
    value: function addCityEvent() {
      var _this4 = this;

      var _this$options3 = this.options,
          drillDownTriggerEvent = _this$options3.drillDownTriggerEvent,
          drillUpTriggerEvent = _this$options3.drillUpTriggerEvent,
          drillUpEvent = _this$options3.drillUpEvent;
      this.countyLayer.fillLayer.on(drillUpTriggerEvent, function () {
        var properties = _this4.getProperties(_this4.cityLayer.getFillData(), _this4.countyLayer.getOptions().adcode);

        _this4.drillUp();

        drillUpEvent && drillUpEvent(properties);
      });
    }
  }, {
    key: "show",
    value: function show() {
      this.layers.forEach(function (layer) {
        return layer.show();
      });
    }
  }, {
    key: "hide",
    value: function hide() {
      this.layers.forEach(function (layer) {
        return layer.hide();
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.layers.forEach(function (layer) {
        return layer.destroy();
      });
    }
  }, {
    key: "showProvinceView",
    value: function showProvinceView(adcode, newData, joinByField) {
      this.cityLayer.show();
      this.cityLayer.updateDistrict(adcode, newData, joinByField);
      this.cityLayer.fillLayer.fitBounds();
      this.countyLayer.hide();
      this.drillState = 1;
    }
  }, {
    key: "showCityView",
    value: function showCityView(code, newData, joinByField) {
      this.countyLayer.show();
      var adcode = "".concat(code);

      if (adcode.substr(2, 2) === '00') {
        // 重庆包含两个编码
        adcode = [adcode.substr(0, 2) + '0100', adcode.substr(0, 2) + '0200'];
      } // 更新县级行政区划


      this.countyLayer.updateDistrict(adcode, newData, joinByField);
      this.countyLayer.fillLayer.fitBounds();
      this.cityLayer.hide();
      this.drillState = 2;
    }
    /**
     * 向上
     */

  }, {
    key: "drillUp",
    value: function drillUp() {
      switch (this.drillState) {
        case 2:
          this.cityLayer.show();
          this.cityLayer.fillLayer.fitBounds();
          this.countyLayer.hide();
          this.drillState = 1;
          break;

        case 1:
          this.provinceLayer.show();
          this.provinceLayer.fillLayer.fitBounds();
          this.cityLayer.hide();
          this.drillState = 0;
          break;
      }
    }
  }, {
    key: "drillDown",
    value: function drillDown(adcode, newData, joinByField) {
      var drillDepth = this.options.drillDepth;

      if (this.drillState === drillDepth) {
        return;
      }

      switch (this.drillState) {
        case 0:
          this.showProvinceView(adcode, newData, joinByField);
          break;

        case 1:
          this.showCityView(adcode, newData, joinByField);
          break;
      }
    }
  }, {
    key: "updateData",
    value: function updateData(layer, newData, joinByField) {
      switch (layer) {
        case 'province':
          this.provinceLayer.updateData(newData, joinByField);
          break;

        case 'city':
          this.cityLayer.updateData(newData, joinByField);
          break;

        case 'county':
          this.countyLayer.updateData(newData, joinByField);
      }
    }
  }, {
    key: "getLayerOption",
    value: function getLayerOption(type) {
      var _this$options4 = this.options,
          joinBy = _this$options4.joinBy,
          label = _this$options4.label,
          bubble = _this$options4.bubble,
          fill = _this$options4.fill,
          popup = _this$options4.popup,
          geoDataLevel = _this$options4.geoDataLevel;
      var datatype = type + 'Data';
      return _objectSpread({
        data: this.options[datatype],
        joinBy: joinBy,
        label: label,
        bubble: bubble,
        fill: fill,
        popup: popup,
        geoDataLevel: geoDataLevel
      }, this.options[type]);
    }
  }, {
    key: "getProperties",
    value: function getProperties(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var feature = data.features.filter(function (fe) {
        var code = fe.properties.adcode;
        return adcodeArray.indexOf(code) !== -1 || adcodeArray.indexOf('' + code) !== -1;
      });
      return feature[0] ? feature[0].properties : {};
    }
  }]);

  return DrillDownLayer;
}();

export { DrillDownLayer as default };