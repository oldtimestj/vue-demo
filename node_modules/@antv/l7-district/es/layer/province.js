function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// tslint:disable-next-line: no-submodule-imports
import merge from 'lodash/merge';
import { getDataConfig } from '../config';
import BaseLayer from './baseLayer';

var ProvinceLayer = /*#__PURE__*/function (_BaseLayer) {
  _inherits(ProvinceLayer, _BaseLayer);

  var _super = _createSuper(ProvinceLayer);

  function ProvinceLayer(scene) {
    var _this;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ProvinceLayer);

    _this = _super.call(this, scene, option);

    _this.addProvinceFillLayer(); // this.addProvinceLineLayer();


    return _this;
  } // 通过adcode 更新


  _createClass(ProvinceLayer, [{
    key: "updateDistrict",
    value: function updateDistrict(adcode, newData, joinByField) {
      var _this$options$bubble;

      if (!adcode && Array.isArray(adcode) && adcode.length === 0) {
        this.hide();
        return;
      }

      var _this$options = this.options,
          label = _this$options.label,
          showBorder = _this$options.showBorder;
      this.setOption({
        adcode: adcode
      });
      var fillData = this.filterData(this.fillRawData, adcode);
      var lineData = this.filterData(this.lineRawData, adcode);
      var labelData = this.filterLabelData(this.labelRawData, adcode);

      if (this.options.bubble && ((_this$options$bubble = this.options.bubble) === null || _this$options$bubble === void 0 ? void 0 : _this$options$bubble.enable) !== false) {
        var bubbleData = fillData.features.map(function (feature) {
          return _objectSpread(_objectSpread({}, feature.properties), {}, {
            center: [feature.properties.x, feature.properties.y]
          });
        });
        this.bubbleLayer.setData(bubbleData);
      }

      this.fillData = fillData;
      this.updateData(newData, joinByField);

      if (showBorder) {
        this.lineLayer.setData(lineData);
      }

      if (label.enable) {
        this.labelLayer.setData(labelData);
      }

      this.show();
    }
  }, {
    key: "getDefaultOption",
    value: function getDefaultOption() {
      var config = _get(_getPrototypeOf(ProvinceLayer.prototype), "getDefaultOption", this).call(this);

      return merge({}, config, {
        adcode: ['110000'],
        depth: 2,
        label: {
          field: 'NAME_CHN',
          textAllowOverlap: false
        },
        popup: {
          enable: true,
          Html: function Html(props) {
            return "<span>".concat(props.NAME_CHN, "</span>");
          }
        }
      });
    }
  }, {
    key: "filterData",
    value: function filterData(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var features = data.features.filter(function (fe) {
        var code = fe.properties.adcode_pro;
        return adcodeArray.indexOf(code) !== -1 || adcodeArray.indexOf('' + code) !== -1;
      });
      return {
        type: 'FeatureCollection',
        features: features
      };
    }
  }, {
    key: "filterLabelData",
    value: function filterLabelData(data, adcode) {
      var adcodeArray = Array.isArray(adcode) ? adcode : [adcode];
      var features = data.filter(function (fe) {
        var code = fe.adcode_pro;
        return adcodeArray.indexOf(code) !== -1 || adcodeArray.indexOf('' + code) !== -1;
      });
      return features;
    }
  }, {
    key: "addProvinceFillLayer",
    value: function () {
      var _addProvinceFillLayer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this$options2, depth, adcode, label, showBorder, countryConfig, fillData, data, labelData;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$options2 = this.options, depth = _this$options2.depth, adcode = _this$options2.adcode, label = _this$options2.label, showBorder = _this$options2.showBorder;
                countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[depth];
                _context.next = 4;
                return this.fetchData(countryConfig.fill);

              case 4:
                fillData = _context.sent;
                this.labelRawData = fillData.features.map(function (feature) {
                  return _objectSpread(_objectSpread({}, feature.properties), {}, {
                    center: [feature.properties.x, feature.properties.y]
                  });
                });
                data = this.filterData(fillData, adcode);
                this.fillData = data;
                labelData = this.filterLabelData(this.labelRawData, adcode);
                this.fillRawData = fillData;
                this.addFillLayer(data);

                if (label.enable) {
                  this.addLabelLayer(labelData);
                }

                this.lineRawData = fillData;

                if (showBorder) {
                  this.addFillLine(data);
                }

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function addProvinceFillLayer() {
        return _addProvinceFillLayer.apply(this, arguments);
      }

      return addProvinceFillLayer;
    }()
  }, {
    key: "addProvinceLineLayer",
    value: function () {
      var _addProvinceLineLayer = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var _this$options3, depth, adcode, countryConfig, fillData, data;

        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _this$options3 = this.options, depth = _this$options3.depth, adcode = _this$options3.adcode;
                countryConfig = getDataConfig(this.options.geoDataLevel).country.CHN[depth];
                _context2.next = 4;
                return this.fetchData(countryConfig.line);

              case 4:
                fillData = _context2.sent;
                data = this.filterData(fillData, adcode);
                this.lineRawData = fillData;
                this.addFillLine(data);

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function addProvinceLineLayer() {
        return _addProvinceLineLayer.apply(this, arguments);
      }

      return addProvinceLineLayer;
    }()
  }]);

  return ProvinceLayer;
}(BaseLayer);

export { ProvinceLayer as default };