"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _l = require("@antv/l7");

var _config = require("../config");

var _baseLayer = _interopRequireDefault(require("./baseLayer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var WorldLayer = /*#__PURE__*/function (_BaseLayer) {
  _inherits(WorldLayer, _BaseLayer);

  var _super = _createSuper(WorldLayer);

  function WorldLayer(scene) {
    var _this;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, WorldLayer);

    _this = _super.call(this, scene, option);

    _this.loadData().then(function (_ref) {
      var _this$options$label;

      var _ref2 = _slicedToArray(_ref, 3),
          fillData = _ref2[0],
          lineData = _ref2[1],
          fillLabel = _ref2[2];

      _this.addFillLayer(fillData);

      if (_this.options.showBorder) {
        _this.addFillLine(lineData);
      }

      if ((_this$options$label = _this.options.label) === null || _this$options$label === void 0 ? void 0 : _this$options$label.enable) {
        _this.addLabelLayer(fillLabel, 'json');
      }
    });

    return _this;
  }

  _createClass(WorldLayer, [{
    key: "addFillLine",
    value: function addFillLine(data) {
      // 未定国界
      var bord1 = data.features.filter(function (feature) {
        return feature.properties.type === '10' || feature.properties.type === '1' || feature.properties.type === '11' || feature.properties.type === '8';
      });
      var bordFc = {
        type: 'FeatureCollection',
        features: bord1
      }; // 已确定国界

      var nationalBorder = data.features.filter(function (feature) {
        return feature.properties.type !== '10' && feature.properties.type !== '1' && feature.properties.type !== '11' && feature.properties.type !== '8';
      });
      var nationalFc = {
        type: 'FeatureCollection',
        features: nationalBorder
      };
      this.addNationBorder(nationalFc, bordFc);
    }
  }, {
    key: "loadData",
    value: function () {
      var _loadData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var countryConfig, fillData, lineData, fillLabel;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                countryConfig = (0, _config.getDataConfig)(this.options.geoDataLevel).world;
                _context.next = 3;
                return this.fetchData(countryConfig.fill);

              case 3:
                fillData = _context.sent;
                _context.next = 6;
                return this.fetchData(countryConfig.line);

              case 6:
                lineData = _context.sent;
                // const fillLabel = await this.fetchData(countryConfig.label);
                fillLabel = fillData.features.map(function (feature) {
                  return _objectSpread(_objectSpread({}, feature.properties), {}, {
                    center: [feature.properties.x, feature.properties.y]
                  });
                });
                return _context.abrupt("return", [fillData, lineData, fillLabel]);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadData() {
        return _loadData.apply(this, arguments);
      }

      return loadData;
    }()
  }, {
    key: "addNationBorder",
    value: function addNationBorder(boundaries, boundaries2) {
      var _this$options = this.options,
          nationalStroke = _this$options.nationalStroke,
          nationalWidth = _this$options.nationalWidth,
          coastlineStroke = _this$options.coastlineStroke,
          chinaNationalStroke = _this$options.chinaNationalStroke,
          chinaNationalWidth = _this$options.chinaNationalWidth,
          coastlineWidth = _this$options.coastlineWidth,
          visible = _this$options.visible,
          zIndex = _this$options.zIndex; // 添加国界线

      var lineLayer = new _l.LineLayer({
        zIndex: zIndex + 0.1,
        visible: visible
      }).source(boundaries) // .size(0.6)
      .size('type', function (v) {
        if (v === '0') {
          return chinaNationalWidth; // 中国国界线
        } else if (v === '2' || v === '9') {
          return coastlineWidth; // 中国海岸线
        } else if (v === '7') {
          return nationalWidth; // 国外国界
        } else {
          return nationalWidth;
        }
      }).color('type', function (v) {
        if (v === '0') {
          return chinaNationalStroke; // 中国国界线
        } else if (v === '2' || v === '9') {
          return coastlineStroke; // 中国海岸线
        } else if (v === '7') {
          return nationalStroke; // 国外国界
        } else {
          return nationalStroke;
        }
      }); // 添加未定国界

      var lineLayer2 = new _l.LineLayer({
        zIndex: zIndex + 0.1,
        visible: visible
      }).source(boundaries2).size('type', function (v) {
        if (v === '1') {
          return chinaNationalWidth;
        } else {
          return nationalWidth;
        }
      }).shape('line').color('type', function (v) {
        if (v === '1') {
          return chinaNationalStroke;
        } else {
          return nationalStroke;
        }
      }).style({
        lineType: 'dash',
        dashArray: [2, 2]
      });
      this.scene.addLayer(lineLayer);
      this.scene.addLayer(lineLayer2);
      this.layers.push(lineLayer, lineLayer2);
    }
  }]);

  return WorldLayer;
}(_baseLayer.default);

exports.default = WorldLayer;